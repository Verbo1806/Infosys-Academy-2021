package bg.infosys.crc.admin.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import bg.infosys.crc.admin.dto.FullQualityCheckDTO;
import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.MeasurementDTO;
import bg.infosys.crc.admin.dto.MeasurementFilterDTO;
import bg.infosys.crc.admin.dto.MeasurementPagingDTO;
import bg.infosys.crc.admin.dto.NetworkTypeDTO;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.QualityCheckDTO;
import bg.infosys.crc.admin.entity.config.Measurement;
import bg.infosys.crc.admin.entity.config.QualityCheck;
import bg.infosys.crc.admin.entity.config.Speed;
import bg.infosys.crc.admin.repository.MeasurementRepository;
import bg.infosys.crc.admin.repository.NetworkTypeRepository;
import bg.infosys.crc.admin.repository.QualityCheckRepository;
import bg.infosys.crc.admin.repository.SpeedRepository;
import bg.infosys.crc.admin.repository.TestRepository;
import bg.infosys.crc.admin.service.mapper.MeasurementMapper;
import bg.infosys.crc.admin.service.mapper.NetworkTypeMapper;
import bg.infosys.crc.admin.service.mapper.QualityCheckMapper;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MeasurementService {
	private final QualityCheckRepository qualityCheckRepository;
	private final MeasurementRepository measurementRepository;
	
	private final TestRepository testRepository;
	private final SpeedRepository speedRepository;
	private final NetworkTypeRepository networkTypeRepository;
	
	private final QualityCheckMapper qualityCheckMapper;
	private final MeasurementMapper measurementMapper;
	private final NetworkTypeMapper networkTypeMapper;
	
	public List<QualityCheckDTO> findAll() {
		return qualityCheckRepository.findAll().stream()
												.map(s -> qualityCheckMapper.toDto(s))
												.collect(Collectors.toList());
	}
	
	public Optional<QualityCheckDTO> findByCode(String entityId) {
		return qualityCheckRepository.findById(entityId).map(p -> qualityCheckMapper.toDto(p));
	}
	
	// TODO: refactor
	public Optional<FullQualityCheckDTO> findFull(String entityId) {
		Optional<QualityCheck> check = qualityCheckRepository.findById(entityId);
		if (check.isPresent()) {
			Optional<Measurement> measurement = measurementRepository.findByQualityCheckUuid(entityId);
			FullQualityCheckDTO fullCheck = FullQualityCheckDTO.toDto(check.get());
			if (measurement.isPresent()) {
				MeasurementDTO measurementDTO = measurementMapper.toDto(measurement.get());
				fullCheck.setMeasurement(measurementDTO);
			}
			return Optional.of(fullCheck);
		}
		return Optional.empty();
	}
	
	@Transactional
	public LitePage<MeasurementPagingDTO> findAllByFilter(MeasurementFilterDTO filter, PagingSorting pagingSorting) {
		Optional<Speed> uploadSpeed = null;
		Optional<Speed> downloadSpeed = null;
		if (filter.getUploadSpeed() != null) {		
			uploadSpeed = speedRepository.findById(filter.getUploadSpeed());
		}
		if (filter.getDownloadSpeed() != null) {
			if (filter.getDownloadSpeed().equals(filter.getUploadSpeed())) {
				downloadSpeed = uploadSpeed;
			} else {				
				downloadSpeed = speedRepository.findById(filter.getDownloadSpeed());
			}
		}
		List<MeasurementPagingDTO> results = testRepository.findAllByFilter(filter, uploadSpeed, downloadSpeed, pagingSorting);
		
		return LitePage.<MeasurementPagingDTO>builder()
					   .content(results)
					   .pageNumber(pagingSorting.getPageNumber())
					   .pageSize(pagingSorting.getPageSize())
					   .totalElements(testRepository.countAllByFilter(filter, uploadSpeed, downloadSpeed))
					   .build();
	}
	
	public List<NetworkTypeDTO> findAllNetworkTypes() {
		return networkTypeRepository.findAll().stream()
										  .map(s -> networkTypeMapper.toDto(s))
										  .collect(Collectors.toList());
	}
}
