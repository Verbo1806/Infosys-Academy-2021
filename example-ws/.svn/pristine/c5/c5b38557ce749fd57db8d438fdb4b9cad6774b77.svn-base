package bg.infosys.crc.admin.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.SpeedDTO;
import bg.infosys.crc.admin.entity.Speed;
import bg.infosys.crc.admin.repository.SpeedRepository;
import bg.infosys.crc.admin.service.mapper.SpeedMapper;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class SpeedService {
	private final SpeedRepository speedRepository;
	private final SpeedMapper speedMapper;
	
	public List<SpeedDTO> findAll() {
		return speedRepository.findAll().stream()
										.map(s -> speedMapper.toDto(s))
										.collect(Collectors.toList());
	}
	
	public Optional<SpeedDTO> findById(Integer entityId) {
		return speedRepository.findById(entityId).map(p -> speedMapper.toDto(p));
	}
	
	@Transactional
	public SpeedDTO update(SpeedDTO entity, Integer entityId) {
		Speed updatedEntity = speedRepository.findById(entityId)
											 .orElseThrow(() -> new EntityNotFoundException("Speed does not exist!"));

		entity.setId(entityId);
		updatedEntity = speedRepository.save(speedMapper.toEntity(entity));
		return speedMapper.toDto(updatedEntity);
	}
	
	@Transactional
	public SpeedDTO save(SpeedDTO entity) {
		Speed forSave = speedRepository.save(speedMapper.toEntity(entity));
		return speedMapper.toDto(forSave);
	}
	
	@Transactional
	public LitePage<SpeedDTO> findAllByFilter(String name, Integer rangeFrom, Integer rangeTo, Boolean active, PagingSorting pagingSorting) {
		List<Speed> results = speedRepository.findAllByFilter(name, rangeFrom, rangeTo, active, pagingSorting);
		
		return LitePage.<SpeedDTO>builder()
					   .content(results.stream()
									     .map(p -> speedMapper.toDto(p))
									     .collect(Collectors.toList()))
					   .pageNumber(pagingSorting.getPageNumber())
					   .pageSize(pagingSorting.getPageSize())
					   .totalElements(speedRepository.countAllByFilter(name, rangeFrom, rangeTo, active))
					   .build();
	}
}
