package bg.infosys.crc.admin.controller;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import bg.infosys.crc.admin.config.ControllerConfig;
import bg.infosys.crc.admin.config.Permissions;
import bg.infosys.crc.admin.controller.docs.IMeasurementController;
import bg.infosys.crc.admin.dto.FullQualityCheckDTO;
import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.MeasurementFilterDTO;
import bg.infosys.crc.admin.dto.MeasurementPagingDTO;
import bg.infosys.crc.admin.dto.NetworkTypeDTO;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.service.MeasurementService;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping(ControllerConfig.MEASUREMENTS_URL)
public class MeasurementController implements IMeasurementController {
	private final MeasurementService measurementService;

	@GetMapping("full/{entityId}")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.VIEW_MEAS_HIST)
	public ResponseEntity<FullQualityCheckDTO> findFull(@PathVariable String entityId) {
		Optional<FullQualityCheckDTO> dto = measurementService.findFull(entityId);
	    return dto.map(ResponseEntity::ok).orElseGet(()-> ResponseEntity.notFound().build());
	}
	
	@GetMapping("paging")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.VIEW_MEAS_HIST)
	public LitePage<MeasurementPagingDTO> findAllPageable(
			   @RequestParam(defaultValue = "0") int page,
		       @RequestParam(defaultValue = "5") int size,
		       @RequestParam(defaultValue = "uid", required = false) String sortBy,
		       @RequestParam(defaultValue = "asc", required = false) String sortDirection,
		       @RequestParam(required = false) Long uid,
		       @RequestParam(required = false) String uuid,
		       @RequestParam(required = false) Integer uploadSpeed,
		       @RequestParam(required = false) Integer downloadSpeed,
		       @RequestParam(required = false) Integer provider,
		       @RequestParam(required = false) String region,
		       @RequestParam(required = false) Integer network,
		       @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
		       @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to) {
		return measurementService.findAllByFilter(new MeasurementFilterDTO(uid, uuid, uploadSpeed, downloadSpeed, provider, region, network, from, to),
				new PagingSorting(page, size, sortBy, sortDirection));
	}
	
	@GetMapping("network-types")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.VIEW_MEAS_HIST)
	public List<NetworkTypeDTO> findAllNetworkTypes() {
		return measurementService.findAllNetworkTypes();
	}
}
