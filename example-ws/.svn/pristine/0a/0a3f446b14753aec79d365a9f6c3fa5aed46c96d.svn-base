package bg.infosys.crc.admin.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import bg.infosys.crc.admin.dto.FullQualityCheckDTO;
import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.MeasurementDTO;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.QualityCheckDTO;
import bg.infosys.crc.admin.entity.Measurement;
import bg.infosys.crc.admin.entity.QualityCheck;
import bg.infosys.crc.admin.repository.MeasurementRepository;
import bg.infosys.crc.admin.repository.QualityCheckRepository;
import bg.infosys.crc.admin.service.mapper.MeasurementMapper;
import bg.infosys.crc.admin.service.mapper.QualityCheckMapper;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class QualityCheckService {
	private final QualityCheckRepository qualityCheckRepository;
	private final MeasurementRepository measurementRepository;
	
	private final QualityCheckMapper qualityCheckMapper;
	private final MeasurementMapper measurementMapper;
	
	public List<QualityCheckDTO> findAll() {
		return qualityCheckRepository.findAll().stream()
												.map(s -> qualityCheckMapper.toDto(s))
												.collect(Collectors.toList());
	}
	
	public Optional<QualityCheckDTO> findByCode(String entityId) {
		return qualityCheckRepository.findById(entityId).map(p -> qualityCheckMapper.toDto(p));
	}
	
	// TODO: refactor
	public Optional<FullQualityCheckDTO> findFull(String entityId) {
		Optional<QualityCheck> check = qualityCheckRepository.findById(entityId);
		if (check.isPresent()) {
			Optional<Measurement> measurement = measurementRepository.findByQualityCheckUuid(entityId);
			FullQualityCheckDTO fullCheck = FullQualityCheckDTO.toDto(check.get());
			if (measurement.isPresent()) {
				MeasurementDTO measurementDTO = measurementMapper.toDto(measurement.get());
				fullCheck.setMeasurement(measurementDTO);
			}
			return Optional.of(fullCheck);
		}
		return Optional.empty();
	}
	
	@Transactional
	public LitePage<QualityCheckDTO> findAllByFilter(String uuid, Boolean isSuccessful, PagingSorting pagingSorting) {
		List<QualityCheck> results = qualityCheckRepository.findAllByFilter(uuid, isSuccessful, pagingSorting);
		
		return LitePage.<QualityCheckDTO>builder()
					   .content(results.stream()
									     .map(p -> qualityCheckMapper.toDto(p))
									     .collect(Collectors.toList()))
					   .pageNumber(pagingSorting.getPageNumber())
					   .pageSize(pagingSorting.getPageSize())
					   .totalElements(qualityCheckRepository.countAllByFilter(uuid, isSuccessful))
					   .build();
	}
}
