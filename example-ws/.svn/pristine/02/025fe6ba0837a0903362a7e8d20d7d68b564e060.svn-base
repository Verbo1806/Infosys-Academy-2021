package bg.infosys.crc.admin.controller;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import bg.infosys.crc.admin.config.ControllerConfig;
import bg.infosys.crc.admin.config.Permissions;
import bg.infosys.crc.admin.controller.docs.IUserController;
import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.UserDTO;
import bg.infosys.crc.admin.dto.UserPagingDTO;
import bg.infosys.crc.admin.service.security.UserService;
import io.swagger.annotations.Api;
import lombok.RequiredArgsConstructor;

@RestController
@Api(tags = "Users")
@RequiredArgsConstructor
@RequestMapping(ControllerConfig.USERS_URL)
public class UserController implements IUserController {
	private final UserService userService;
	
	@GetMapping("/paging")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.MODIFY_USER)
	public LitePage<UserPagingDTO> findAllPageable(
		   @RequestParam(defaultValue = "0") int page,
	       @RequestParam(defaultValue = "5") int size,
	       @RequestParam(defaultValue = "username", required = false) String sortBy,
	       @RequestParam(defaultValue = "asc", required = false) String sortDirection,
	       @RequestParam(required = false) String username) {

		return userService.findAllByFilter(username, new PagingSorting(page, size, sortBy, sortDirection));
	}
	
	@GetMapping("/{entityId}")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.MODIFY_INFO)
	public ResponseEntity<UserDTO> findOne(@PathVariable Integer entityId) {
		Optional<UserDTO> entity = userService.findById(entityId);
	    return entity.map(ResponseEntity::ok).orElseGet(()-> ResponseEntity.notFound().build());
	}
	
	@PostMapping
	@Secured(Permissions.MODIFY_USER)
	public ResponseEntity<UserDTO> addUser(@RequestBody UserDTO user) {
		UserDTO createdEntity = userService.saveUser(user);
		return ResponseEntity.status(201).body(createdEntity);
	}
	
	@PutMapping("/{entityId}")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.MODIFY_USER)
	public ResponseEntity<UserDTO> update(@PathVariable Integer entityId, @RequestBody @Valid UserDTO entity) {
		UserDTO updatedEntity = userService.update(entity, entityId);
		return ResponseEntity.status(200).body(updatedEntity);
	}
}
