package bg.infosys.crc.admin.service.security;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import bg.infosys.crc.admin.controller.error.APIErrorCodes;
import bg.infosys.crc.admin.controller.exception.BadRequestException;
import bg.infosys.crc.admin.dto.AuthorityDTO;
import bg.infosys.crc.admin.dto.AuthorityPagingDTO;
import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.PermissionDTO;
import bg.infosys.crc.admin.entity.security.Authority;
import bg.infosys.crc.admin.repository.security.AuthorityRepository;
import bg.infosys.crc.admin.repository.security.PermissionRepository;
import bg.infosys.crc.admin.repository.security.UserRepository;
import bg.infosys.crc.admin.service.mapper.AuthorityMapper;
import bg.infosys.crc.admin.service.mapper.PermissionMapper;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthorityService {
	private final AuthorityRepository authorityRepository;
	private final PermissionRepository permissionRepository;
	private final UserRepository userRepository;
	
	private final AuthorityMapper authorityMapper;
	private final PermissionMapper permissionMapper;
	
	public List<AuthorityDTO> findAll() {
		return authorityRepository.findAll().stream()
											.map(p -> authorityMapper.toDto(p))
											.collect(Collectors.toList());
	}
	
	public Optional<AuthorityDTO> findById(Integer entityId) {
		return authorityRepository.findById(entityId).map(p -> authorityMapper.toDto(p));
	}
	
	public Optional<Authority> findEntityById(Integer entityId) {
		return authorityRepository.findById(entityId);
	}
	
	@Transactional
	public AuthorityDTO update(AuthorityDTO entity, Integer entityId) {
		if (!entity.getEnabled() && userRepository.isAuthUsed(entityId)) {
			throw new BadRequestException(APIErrorCodes.EXISTING_USER_WITH_AUTH);
		}
		Authority updatedEntity = authorityRepository.findById(entityId)
													.orElseThrow(() -> new EntityNotFoundException("Authority does not exist!"));

		entity.setId(entityId);
		updatedEntity.setName(entity.getName());
		updatedEntity.setDescription(entity.getDescription());
		updatedEntity.setEnabled(entity.getEnabled());
		updatedEntity.setPermissions(entity.getPermissions().stream()
															.map(p -> permissionMapper.toEntity(p))
															.collect(Collectors.toList()));
		
		updatedEntity = authorityRepository.save(updatedEntity);
		return authorityMapper.toDto(updatedEntity);
	}
	
	@Transactional
	public AuthorityDTO save(AuthorityDTO entity) {
		Authority forSave = authorityRepository.save(authorityMapper.toEntity(entity));
		return authorityMapper.toDto(forSave);
	}
	
	@Transactional
	public LitePage<AuthorityPagingDTO> findAllByFilter(String name, PagingSorting pagingSorting) {
		List<Authority> results = authorityRepository.findAllByFilter(name, pagingSorting);
		
		return LitePage.<AuthorityPagingDTO>builder()
					   .content(results.stream()
									     .map(p -> authorityMapper.toPagingDto(p))
									     .collect(Collectors.toList()))
					   .pageNumber(pagingSorting.getPageNumber())
					   .pageSize(pagingSorting.getPageSize())
					   .totalElements(authorityRepository.countAllByFilter(name))
					   .build();
	}

	public List<PermissionDTO> findAllPermissions() {
		return permissionRepository.findAll().stream()
											.map(p -> permissionMapper.toDto(p))
											.collect(Collectors.toList());
	}
}
