package bg.infosys.crc.admin.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.springframework.stereotype.Service;

import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.MeasurementParameterDTO;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.entity.config.MeasurementParameter;
import bg.infosys.crc.admin.repository.MeasurementParameterRepository;
import bg.infosys.crc.admin.service.mapper.MeasurementParameterMapper;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MeasurementParameterService {
	private final MeasurementParameterRepository measurementParameterRepository;
	private final MeasurementParameterMapper measurementParameterMapper;
	
	public List<MeasurementParameterDTO> findAll() {
		return measurementParameterRepository.findAll().stream()
											.map(p -> measurementParameterMapper.toDto(p))
											.collect(Collectors.toList());
	}
	
	public Optional<MeasurementParameterDTO> findById(String entityId) {
		return measurementParameterRepository.findById(entityId).map(p -> measurementParameterMapper.toDto(p));
	}
	
	@Transactional
	public MeasurementParameterDTO update(MeasurementParameterDTO entity, String entityId) {
		MeasurementParameter updatedEntity = measurementParameterRepository.findById(entityId)
													.orElseThrow(() -> new EntityNotFoundException("Parameter does not exist!"));

		entity.setCode(entityId);
		updatedEntity = measurementParameterRepository.save(measurementParameterMapper.toEntity(entity));
		return measurementParameterMapper.toDto(updatedEntity);
	}
	
	@Transactional
	public LitePage<MeasurementParameterDTO> findAllByFilter(String code, String type, PagingSorting pagingSorting) {
		List<MeasurementParameter> results = measurementParameterRepository.findAllByFilter(code, type, pagingSorting);
		
		return LitePage.<MeasurementParameterDTO>builder()
					   .content(results.stream()
									     .map(p -> measurementParameterMapper.toDto(p))
									     .collect(Collectors.toList()))
					   .pageNumber(pagingSorting.getPageNumber())
					   .pageSize(pagingSorting.getPageSize())
					   .totalElements(measurementParameterRepository.countAllByFilter(code, type))
					   .build();
	}
}
