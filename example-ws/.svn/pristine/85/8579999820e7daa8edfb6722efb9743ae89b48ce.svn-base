package bg.infosys.crc.admin.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import bg.infosys.crc.admin.config.ControllerConfig;
import bg.infosys.crc.admin.config.Permissions;
import bg.infosys.crc.admin.dto.LitePage;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.reports.Report1DTO;
import bg.infosys.crc.admin.dto.reports.filter.Report1FilterDTO;
import bg.infosys.crc.admin.entity.Speed2;
import bg.infosys.crc.admin.service.StatisticsService;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping(ControllerConfig.STATISTICS_URL)
public class StatisticsController {
	private final StatisticsService statisticsService;

	@GetMapping("report/1")
	@ResponseStatus(HttpStatus.OK)
	@Secured(Permissions.VIEW_STATS)
	public LitePage<Report1DTO> findAllPageable(
			   @RequestParam(defaultValue = "0") int page,
		       @RequestParam(defaultValue = "5") int size,
		       @RequestParam(defaultValue = "region", required = false) String sortBy,
		       @RequestParam(defaultValue = "asc", required = false) String sortDirection,
		       @RequestParam(required = false) Integer downloadSpeed,
		       @RequestParam(required = false) Integer provider,
		       @RequestParam(required = false) String region,
		       @RequestParam(required = false) Integer network,
		       @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
		       @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to) {
		return statisticsService.findReport1ByFilter(new Report1FilterDTO(downloadSpeed, provider, region, network, from, to),
				new PagingSorting(page, size, sortBy, sortDirection));
	}
	
	@GetMapping("test")
	@ResponseStatus(HttpStatus.OK)
	public List<Speed2> test() {
		return statisticsService.test();
	}
}
