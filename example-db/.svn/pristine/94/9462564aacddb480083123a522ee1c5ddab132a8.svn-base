package bg.infosys.crc.admin.repository.custom.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.entity.Provider;
import bg.infosys.crc.admin.repository.custom.GenericRepository;
import bg.infosys.crc.admin.repository.custom.ProviderRepositoryCustom;
import bg.infosys.crc.admin.util.SortingUtil;

public class ProviderRepositoryCustomImpl extends GenericRepository<Provider> implements ProviderRepositoryCustom {

	@Override
	public List<Provider> findAllByFilter(String name, String identNum, Boolean active, PagingSorting pagingSorting) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Provider> criteria = builder.createQuery(Provider.class);
		Root<Provider> root = criteria.from(Provider.class);
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if (name != null) {			
			predicates.add(builder.like(root.get(Provider._name), "%" + name + "%"));
		}
		
		if (identNum != null) {
			predicates.add(builder.like(root.get(Provider._identNum), "%" + identNum + "%"));
		}
		
		if (active != null) {
			predicates.add(builder.equal(root.get(Provider._active), true));
		}
		
		SortingUtil.<Provider>sort(criteria, builder, root.get(pagingSorting.getSortBy()), pagingSorting.getSortDirection());
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).setFirstResult(pagingSorting.getPageSize() * pagingSorting.getPageNumber())
									.setMaxResults(pagingSorting.getPageSize())
									.getResultList();
	}

	@Override
	public long countAllByFilter(String name, String identNum, Boolean active) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<Provider> root = criteria.from(Provider.class);
		
		criteria.select(builder.countDistinct(root));
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if (name != null) {			
			predicates.add(builder.like(root.get(Provider._name), "%" + name + "%"));
		}
		
		if (identNum != null) {
			predicates.add(builder.like(root.get(Provider._identNum), "%" + identNum + "%"));
		}
		
		if (active != null) {
			predicates.add(builder.equal(root.get(Provider._active), true));
		}
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).getSingleResult();
	}
}
