package bg.infosys.crc.admin.repository.security.custom.impl;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.NoResultException;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import bg.infosys.common.ws.security.db.dao.AbstractUserDAO;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.entity.security.Authority;
import bg.infosys.crc.admin.entity.security.User;
import bg.infosys.crc.admin.repository.security.custom.UserRepositoryCustom;
import bg.infosys.crc.admin.util.SortingUtil;

public class UserRepositoryCustomImpl extends AbstractUserDAO<User, Authority> implements UserRepositoryCustom {

	@Override
	public User findByUsername(String username, Integer userId) {
		CriteriaBuilder cb = criteriaBuilder();
		CriteriaQuery<User> crit = cb.createQuery(User.class);
		Root<User> root	= crit.from(User.class);
		
		crit.select(root);
		
		if (userId != null) {
			crit.where(
				cb.equal(root.get(User._username), username),
				cb.notEqual(root.get(_id), userId));
		} else {
			crit.where(cb.equal(root.get(User._username), username));
		}
		
		try {
			return createQuery(crit).getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
	}
	
	@Override
	public List<User> findAllByFilter(String username, PagingSorting pagingSorting) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<User> criteria = builder.createQuery(User.class);
		Root<User> root = criteria.from(User.class);
		
		//root.fetch(User._grantedAuthorities, JoinType.LEFT);
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if (username != null) {			
			predicates.add(builder.like(root.get(User._username), "%" + username + "%"));
		}
		
		SortingUtil.<User>sort(criteria, builder, root.get(pagingSorting.getSortBy()), pagingSorting.getSortDirection());
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).setFirstResult(pagingSorting.getPageSize() * pagingSorting.getPageNumber())
									.setMaxResults(pagingSorting.getPageSize())
									.getResultList();
	}

	@Override
	public long countAllByFilter(String username) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<User> root = criteria.from(User.class);
		
		criteria.select(builder.countDistinct(root));
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		
		if (username != null) {			
			predicates.add(builder.like(root.get(User._username), "%" + username + "%"));
		}
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).getSingleResult();
	}

	@Override
	public boolean isAuthUsed(Integer authId) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<User> root = criteria.from(User.class);
		Join<User, Authority> userAuthorityJoin = root.join(User._grantedAuthorities, JoinType.LEFT);
		
		criteria.select(builder.countDistinct(root));
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		predicates.add(builder.equal(root.get(User._enabled), true));
		predicates.add(builder.equal(userAuthorityJoin.get("id"), authId));
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).getSingleResult() > 0;
	}
	
	@Override
	public boolean hasDisabledAuth(Integer userId) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<User> root = criteria.from(User.class);
		Join<User, Authority> userAuthorityJoin = root.join(User._grantedAuthorities, JoinType.LEFT);
		
		criteria.select(builder.countDistinct(root));
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		predicates.add(builder.equal(root.get("id"), userId));
		predicates.add(builder.equal(userAuthorityJoin.get(Authority._enabled), false));
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).getSingleResult() > 0;
	}
}
