package bg.infosys.crc.admin.repository.custom.impl;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import bg.infosys.crc.admin.dto.MeasurementFilterDTO;
import bg.infosys.crc.admin.dto.MeasurementPagingDTO;
import bg.infosys.crc.admin.dto.PagingSorting;
import bg.infosys.crc.admin.dto.reports.Report1DTO;
import bg.infosys.crc.admin.dto.reports.SpeedItemsDTO;
import bg.infosys.crc.admin.dto.reports.filter.Report1FilterDTO;
import bg.infosys.crc.admin.entity.NetworkType;
import bg.infosys.crc.admin.entity.Provider;
import bg.infosys.crc.admin.entity.Region;
import bg.infosys.crc.admin.entity.Test;
import bg.infosys.crc.admin.entity.config.Speed;
import bg.infosys.crc.admin.repository.custom.GenericRepository;
import bg.infosys.crc.admin.repository.custom.TestRepositoryCustom;
import bg.infosys.crc.admin.util.SortingUtil;

public class TestRepositoryCustomImpl extends GenericRepository<Test> implements TestRepositoryCustom {

	@Override
	public List<MeasurementPagingDTO> findAllByFilter(MeasurementFilterDTO filter, Optional<Speed> uploadSpeed, Optional<Speed> downloadSpeed, PagingSorting pagingSorting) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<MeasurementPagingDTO> criteria = builder.createQuery(MeasurementPagingDTO.class);
		Root<Test> root = criteria.from(Test.class);
		Join<Test, Provider> testProviderJoin = root.join(Test._provider, JoinType.LEFT);
		Join<Test, Region> testRegionJoin = root.join(Test._region, JoinType.LEFT);
		Join<Test, NetworkType> testNetworkTypeJoin = root.join(Test._networkType, JoinType.LEFT);
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		addFilters(predicates, root, builder, filter, uploadSpeed, downloadSpeed);
		
		criteria.select(builder.construct(
				MeasurementPagingDTO.class,
				root.get(Test._uid),
				root.get(Test._uuid),
				root.get(Test._time),
				root.get(Test._speedUpload),
				root.get(Test._speedDownload),
				root.get(Test._pingMedian),
				root.get(Test._signalStrength),
				testProviderJoin.get(Provider._name),
				testRegionJoin.get(Region._name),
				testNetworkTypeJoin.get(NetworkType._name)));
		
		SortingUtil.<MeasurementPagingDTO>sort(criteria, builder, root.get(pagingSorting.getSortBy()), pagingSorting.getSortDirection());
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).setFirstResult(pagingSorting.getPageSize() * pagingSorting.getPageNumber())
									.setMaxResults(pagingSorting.getPageSize())
									.getResultList();
	}

	@Override
	public long countAllByFilter(MeasurementFilterDTO filter, Optional<Speed> uploadSpeed, Optional<Speed> downloadSpeed) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<Test> root = criteria.from(Test.class);
		
		criteria.select(builder.countDistinct(root));
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		addFilters(predicates, root, builder, filter, uploadSpeed, downloadSpeed);
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).getSingleResult();
	}
	
	private void addFilters(List<Predicate> predicates, Root<Test> root, CriteriaBuilder builder,
			MeasurementFilterDTO filter, Optional<Speed> uploadSpeed, Optional<Speed> downloadSpeed) {
		if (filter.getUid() != null) {			
			predicates.add(builder.equal(root.get(Test._uid), filter.getUid()));
		}
		
		if (filter.getUuid() != null) {
			predicates.add(builder.like(root.get(Test._uuid).as(String.class), "%" + filter.getUuid() + "%"));
		}
		
		if (filter.getPeriodFrom() != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(Test._time).as(LocalDate.class), filter.getPeriodFrom()));
		}
		
		if (filter.getPeriodTo() != null) {
			predicates.add(builder.lessThanOrEqualTo(root.get(Test._time).as(LocalDate.class), filter.getPeriodTo()));
		}
		
		if (uploadSpeed != null && uploadSpeed.get() != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(Test._speedUpload), uploadSpeed.get().getRangeFrom() * 1000));
			if (uploadSpeed.get().getRangeTo() != null) {
				predicates.add(builder.lessThanOrEqualTo(root.get(Test._speedUpload), (uploadSpeed.get().getRangeTo() * 1000) + 999));
			}
		}
		
		if (downloadSpeed != null && downloadSpeed.get() != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(Test._speedDownload), downloadSpeed.get().getRangeFrom() * 1000));
			if (downloadSpeed.get().getRangeTo() != null) {
				predicates.add(builder.lessThanOrEqualTo(root.get(Test._speedDownload), (downloadSpeed.get().getRangeTo() * 1000) + 999));
			}
		}
		
		if (filter.getProvider() != null) {			
			predicates.add(builder.equal(root.get(Test._provider).get(Provider._uid), filter.getProvider()));
		}
		
		if (filter.getRegion() != null) {			
			predicates.add(builder.equal(root.get(Test._region).get(Region._code), filter.getRegion()));
		}
		
		if (filter.getNetwork() != null) {			
			predicates.add(builder.equal(root.get(Test._networkType).get(NetworkType._uid), filter.getNetwork()));
		}
	}
	
	/* Reports */
	@Override
	public List<Report1DTO> findReport1ByFilter(Report1FilterDTO filter, Optional<Speed> downloadSpeed, PagingSorting pagingSorting) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Report1DTO> criteria = builder.createQuery(Report1DTO.class);
		Root<Test> root = criteria.from(Test.class);
		Join<Test, Region> testRegionJoin = root.join(Test._region, JoinType.LEFT);
		Join<Test, NetworkType> testNetworkTypeJoin = root.join(Test._networkType, JoinType.LEFT);
		Join<Test, bg.infosys.crc.admin.entity.Speed2> speedJoin = root.join(Test._speed, JoinType.LEFT);
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		addReport1Filters(predicates, root, builder, filter, downloadSpeed);
		
		criteria.select(builder.construct(
				Report1DTO.class,
				root.get(Test._speedDownload),
				testRegionJoin.get(Region._name),
				testNetworkTypeJoin.get(NetworkType._name),
				speedJoin.get(bg.infosys.crc.admin.entity.Speed2._items)));
		
		SortingUtil.<Report1DTO>sort(criteria, builder, root.get(pagingSorting.getSortBy()), pagingSorting.getSortDirection());
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).setFirstResult(pagingSorting.getPageSize() * pagingSorting.getPageNumber())
									.setMaxResults(pagingSorting.getPageSize())
									.getResultList();
	}

	@Override
	public long countReport1ByFilter(Report1FilterDTO filter, Optional<Speed> downloadSpeed) {
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<Test> root = criteria.from(Test.class);
		
		criteria.select(builder.countDistinct(root));
		
		List<Predicate> predicates = new ArrayList<Predicate>();
		addReport1Filters(predicates, root, builder, filter, downloadSpeed);
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).getSingleResult();
	}
	
	private void addReport1Filters(List<Predicate> predicates, Root<Test> root, CriteriaBuilder builder,
			Report1FilterDTO filter, Optional<Speed> downloadSpeed) {
		
		if (filter.getPeriodFrom() != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(Test._time).as(LocalDate.class), filter.getPeriodFrom()));
		}
		
		if (filter.getPeriodTo() != null) {
			predicates.add(builder.lessThanOrEqualTo(root.get(Test._time).as(LocalDate.class), filter.getPeriodTo()));
		}
		
		if (downloadSpeed != null && downloadSpeed.get() != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(Test._speedDownload), downloadSpeed.get().getRangeFrom() * 1000));
			if (downloadSpeed.get().getRangeTo() != null) {
				predicates.add(builder.lessThanOrEqualTo(root.get(Test._speedDownload), (downloadSpeed.get().getRangeTo() * 1000) + 999));
			}
		}
		
		if (filter.getProvider() != null) {			
			predicates.add(builder.equal(root.get(Test._provider).get(Provider._uid), filter.getProvider()));
		}
		
		if (filter.getRegion() != null) {			
			predicates.add(builder.equal(root.get(Test._region).get(Region._code), filter.getRegion()));
		}
		
		if (filter.getNetwork() != null) {			
			predicates.add(builder.equal(root.get(Test._networkType).get(NetworkType._uid), filter.getNetwork()));
		}
	}
}
